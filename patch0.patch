diff --git a/config.crosslinux b/config.crosslinux
index 2ea47aa..dab3296 100644
--- a/config.crosslinux
+++ b/config.crosslinux
@@ -1,11 +1,11 @@
 CROSS_COMPILE =		arm-elf-
-COMPILE_OPTS =			$(INCLUDES) -I. -O3 -DSOCKLEN_T=socklen_t -DNO_STRSTREAM=1 -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64 -fPIC 
+COMPILE_OPTS =			$(INCLUDES) -I. -O3 -DSOCKLEN_T=socklen_t -DNO_STRSTREAM=1 -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64 -fPIC
 C =					c
 C_COMPILER =			$(CROSS_COMPILE)gcc
-C_FLAGS =				$(COMPILE_OPTS) $(EXT_CFLAGS)
+C_FLAGS =				$(COMPILE_OPTS)
 CPP =					cpp
 CPLUSPLUS_COMPILER =	$(CROSS_COMPILE)g++
-CPLUSPLUS_FLAGS =		$(COMPILE_OPTS) -Wall -DBSD=1 $(EXT_CFLAGS)
+CPLUSPLUS_FLAGS =		$(COMPILE_OPTS) -Wall -DBSD=1
 OBJ =					o
 LINK =					$(CROSS_COMPILE)g++ -o
 LINK_OPTS =			-L.
diff --git a/config.ppc b/config.ppc
deleted file mode 100644
index 71143a8..0000000
--- a/config.ppc
+++ /dev/null
@@ -1,19 +0,0 @@
-TOOLCHAIN_DIR = /opt/mpc8313/usr/bin
-PREFIX = powerpc-linux-
-COMPILE_OPTS =		$(INCLUDES) -I. -O2 -DSOCKLEN_T=socklen_t -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
-C =			c
-C_COMPILER =		$(TOOLCHAIN_DIR)/$(PREFIX)gcc
-C_FLAGS =		$(COMPILE_OPTS)
-CPP =			cpp
-CPLUSPLUS_COMPILER =	$(TOOLCHAIN_DIR)/$(PREFIX)g++
-CPLUSPLUS_FLAGS =	$(COMPILE_OPTS) -Wall -DBSD=1
-OBJ =			o
-LINK =			$(TOOLCHAIN_DIR)/$(PREFIX)g++ -o
-LINK_OPTS =		-L.
-CONSOLE_LINK_OPTS =	$(LINK_OPTS)
-LIBRARY_LINK =		$(TOOLCHAIN_DIR)/$(PREFIX)ld -o
-LIBRARY_LINK_OPTS =	$(LINK_OPTS) -r -Bstatic
-LIB_SUFFIX =			a
-LIBS_FOR_CONSOLE_APPLICATION =
-LIBS_FOR_GUI_APPLICATION =
-EXE =
diff --git a/config.ppc-gdb b/config.ppc-gdb
deleted file mode 100644
index b4cb5b0..0000000
--- a/config.ppc-gdb
+++ /dev/null
@@ -1,19 +0,0 @@
-TOOLCHAIN_DIR = /opt/mpc8313/usr/bin
-PREFIX = powerpc-linux-
-COMPILE_OPTS =		$(INCLUDES) -I. -O -DSOCKLEN_T=socklen_t -D_LARGEFILE_SOURCE=1 -DNO_STRSTREAM=1 -g -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
-C =			c
-C_COMPILER =		$(TOOLCHAIN_DIR)/$(PREFIX)gcc
-C_FLAGS =		$(COMPILE_OPTS)
-CPP =			cpp
-CPLUSPLUS_COMPILER =	$(TOOLCHAIN_DIR)/$(PREFIX)g++
-CPLUSPLUS_FLAGS =	$(COMPILE_OPTS) -Wall -DBSD=1
-OBJ =			o
-LINK =			$(TOOLCHAIN_DIR)/$(PREFIX)g++ -o
-LINK_OPTS =		-L.
-CONSOLE_LINK_OPTS =	$(LINK_OPTS)
-LIBRARY_LINK =		$(TOOLCHAIN_DIR)/$(PREFIX)ld -o
-LIBRARY_LINK_OPTS =	$(LINK_OPTS) -r -Bstatic
-LIB_SUFFIX =			a
-LIBS_FOR_CONSOLE_APPLICATION =
-LIBS_FOR_GUI_APPLICATION =
-EXE =
diff --git a/liveMedia/MultiFramedRTPSource.cpp b/liveMedia/MultiFramedRTPSource.cpp
index b6d24c3..dee9a53 100644
--- a/liveMedia/MultiFramedRTPSource.cpp
+++ b/liveMedia/MultiFramedRTPSource.cpp
@@ -52,7 +52,6 @@ private:
   Boolean fHaveSeenFirstPacket; // used to set initial "fNextExpectedSeqNo"
   unsigned short fNextExpectedSeqNo;
   BufferedPacket* fHeadPacket;
-  BufferedPacket* fTailPacket;
   BufferedPacket* fSavedPacket;
       // to avoid calling new/free in the common case
   Boolean fSavedPacketFree;
@@ -441,7 +440,7 @@ BufferedPacket* BufferedPacketFactory
 ReorderingPacketBuffer
 ::ReorderingPacketBuffer(BufferedPacketFactory* packetFactory)
   : fThresholdTime(100000) /* default reordering threshold: 100 ms */,
-    fHaveSeenFirstPacket(False), fHeadPacket(NULL), fTailPacket(NULL), fSavedPacket(NULL), fSavedPacketFree(True) {
+    fHaveSeenFirstPacket(False), fHeadPacket(NULL), fSavedPacket(NULL), fSavedPacketFree(True) {
   fPacketFactory = (packetFactory == NULL)
     ? (new BufferedPacketFactory)
     : packetFactory;
@@ -491,18 +490,7 @@ Boolean ReorderingPacketBuffer::storePacket(BufferedPacket* bPacket) {
   // Figure out where the new packet will be stored in the queue:
   BufferedPacket* beforePtr = NULL;
   BufferedPacket* afterPtr = fHeadPacket;
-  
-  if (fTailPacket != NULL)
-  {
-    if (seqNumLT(fTailPacket->rtpSeqNo(), rtpSeqNo))
-    {
-      fTailPacket->nextPacket() = bPacket;
-      fTailPacket = bPacket;
-      return True;
-    }
-  }
-  
-  while (afterPtr != NULL) { 
+  while (afterPtr != NULL) {
     if (seqNumLT(rtpSeqNo, afterPtr->rtpSeqNo())) break; // it comes here
     if (rtpSeqNo == afterPtr->rtpSeqNo()) {
       // This is a duplicate packet - ignore it
@@ -517,7 +505,6 @@ Boolean ReorderingPacketBuffer::storePacket(BufferedPacket* bPacket) {
   bPacket->nextPacket() = afterPtr;
   if (beforePtr == NULL) {
     fHeadPacket = bPacket;
-    fTailPacket = bPacket;
   } else {
     beforePtr->nextPacket() = bPacket;
   }
@@ -532,9 +519,6 @@ void ReorderingPacketBuffer::releaseUsedPacket(BufferedPacket* packet) {
 
   fHeadPacket = fHeadPacket->nextPacket();
   packet->nextPacket() = NULL;
-  
-  if (fHeadPacket == NULL)
-  	fTailPacket = NULL;
 
   freePacket(packet);
 }
diff --git a/liveMedia/RTSPClient.cpp b/liveMedia/RTSPClient.cpp
index 5c7db73..881b183 100644
--- a/liveMedia/RTSPClient.cpp
+++ b/liveMedia/RTSPClient.cpp
@@ -70,8 +70,7 @@ RTSPClient::RTSPClient(UsageEnvironment& env,
     fRealChallengeStr(NULL), fRealETagStr(NULL),
 #endif
     fServerIsKasenna(False), fKasennaContentType(NULL),
-    fServerIsMicrosoft(False),
-    fForceOption(False)
+    fServerIsMicrosoft(False)
 {
   fResponseBufferSize = 20000;
   fResponseBuffer = new char[fResponseBufferSize+1];
@@ -737,7 +736,6 @@ Boolean RTSPClient
 }
 
 Boolean RTSPClient::setupMediaSubsession(MediaSubsession& subsession,
-                     Boolean fForceOption,
 					 Boolean streamOutgoing,
 					 Boolean streamUsingTCP,
 					 Boolean forceMulticastOnUnspecified) {
@@ -899,8 +897,6 @@ Boolean RTSPClient::setupMediaSubsession(MediaSubsession& subsession,
     char const* const cmdFmt =
       "%s"
       "CSeq: %d\r\n"
-      "Require: force-feature\r\n"
-      "Force: %s\r\n"
       "%s"
       "%s"
       "%s"
@@ -914,18 +910,10 @@ Boolean RTSPClient::setupMediaSubsession(MediaSubsession& subsession,
       + strlen(sessionStr)
       + strlen(authenticatorStr)
       + fUserAgentHeaderStrSize;
-
-    char force_cmd[6];
-	if (fForceOption == False)
-        sprintf(force_cmd, "%s", "false");
-	else
-        sprintf(force_cmd, "%s", "true");
-
     cmd = new char[cmdSize];
     sprintf(cmd, cmdFmt,
 	    setupStr,
 	    ++fCSeq,
-        force_cmd,
 	    transportStr,
 	    sessionStr,
 	    authenticatorStr,
@@ -2121,9 +2109,7 @@ Boolean RTSPClient::getResponse(char const* tag,
     firstLine = readBuf;
     nextLineStart = getLine(firstLine);
     if (!parseResponseCode(firstLine, responseCode)) break;
-    
-    // Set last received response code
-    fLastResponseCode = responseCode;
+
 
     if (responseCode != 200 && checkFor200Response) {
       envir().setResultMsg(tag, ": cannot handle response: ", firstLine);
diff --git a/liveMedia/RTSPServer.cpp b/liveMedia/RTSPServer.cpp
index e435fd9..32e7608 100644
--- a/liveMedia/RTSPServer.cpp
+++ b/liveMedia/RTSPServer.cpp
@@ -180,7 +180,6 @@ RTSPServer::RTSPServer(UsageEnvironment& env,
     fServerSocket(ourSocket), fServerPort(ourPort),
     fAuthDB(authDatabase), fReclamationTestSeconds(reclamationTestSeconds),
     fServerMediaSessions(HashTable::create(STRING_HASH_KEYS)),
-    fRTSPClientSessions(HashTable::create(STRING_HASH_KEYS)),
     fSessionIdCounter(0) {
 #ifdef USE_SIGNALS
   // Ignore the SIGPIPE signal, so that clients on the same host that are killed
@@ -188,9 +187,6 @@ RTSPServer::RTSPServer(UsageEnvironment& env,
   signal(SIGPIPE, SIG_IGN);
 #endif
 
-  sourceSwitchCallback = NULL;
-  forceCallback = NULL;
-
   // Arrange to handle connections from others:
   env.taskScheduler().turnOnBackgroundReadHandling(fServerSocket,
         (TaskScheduler::BackgroundHandlerProc*)&incomingConnectionHandler,
@@ -213,9 +209,6 @@ RTSPServer::~RTSPServer() {
 
   // Finally, delete the session table itself:
   delete fServerMediaSessions;
-  
-  // ...and delete table of RTSPClient sessions
-  delete fRTSPClientSessions;
 }
 
 Boolean RTSPServer::isRTSPServer() const {
@@ -267,13 +260,6 @@ RTSPServer::RTSPClientSession
   envir().taskScheduler().turnOnBackgroundReadHandling(fClientSocket,
      (TaskScheduler::BackgroundHandlerProc*)&incomingRequestHandler, this);
   noteLiveness();
-  
-  // Convert sessionId to const char*
-  char sessionIdString[12];
-  sprintf(sessionIdString, "%d", sessionId);
-  ourServer.fRTSPClientSessions->Add(sessionIdString, this);
-  fprintf(stderr, ">>> Added session %s to RTSPClientSessions: %d entries\n",
-  	sessionIdString, ourServer.fRTSPClientSessions->numEntries());
 }
 
 RTSPServer::RTSPClientSession::~RTSPClientSession() {
@@ -294,12 +280,6 @@ RTSPServer::RTSPClientSession::~RTSPClientSession() {
       fOurServer.removeServerMediaSession(fOurServerMediaSession);
     }
   }
-  
-  // Remove ourselves from RTSPServer::fRTSPClientSessions
-  char sessionIdString[12];
-  sprintf(sessionIdString, "%d", fOurSessionId);
-  fOurServer.fRTSPClientSessions->Remove(sessionIdString);
-  fprintf(stderr, "<<< Removed RTSPClientSession %s\n", sessionIdString);
 }
 
 void RTSPServer::RTSPClientSession::reclaimStreamStates() {
@@ -614,41 +594,6 @@ static void parseTransportHeader(char const* buf,
   delete[] field;
 }
 
-
-static Boolean parseRequireHeader(char const *buf, char *feature, char *key, char *val)
-{
-	// Find "Require:" header, if present
-	while (1)
-	{
-		if (*buf == '\0')
-			return False;
-		
-		if (_strncasecmp(buf, "Require:", 8) == 0)
-			break;
-
-		++buf;
-	}
-
-	buf += 8 + 1;	// Skip "Require:" + current char
-	
-	sscanf(buf, "%s\r\n", feature);
-	
-	// Look for key-val pairs
-	buf += strlen(feature);
-	
-	for (int i = 0; i < 10; ++i)
-	{
-		sscanf(buf, "%s %s", key, val);
-		buf += strlen(key) + 1 + strlen(val) + 2; // Consider a space and \r\n
-				
-		if (key[strlen(key)] != ':')
-			break;
-	}
-	
-	return True;
-}
-
-
 static Boolean parsePlayNowHeader(char const* buf) {
   // Find "x-playNow:" header, if present
   while (1) {
@@ -668,7 +613,6 @@ void RTSPServer::RTSPClientSession
   // "urlSuffix" should be the subsession (track) name.
   char const* streamName = urlPreSuffix;
   char const* trackId = urlSuffix;
-  fOurServer.setForceOption(False);;	// initial value
 
   // Check whether we have existing session state, and, if so, whether it's
   // for the session that's named in "streamName".  (Note that we don't
@@ -762,89 +706,7 @@ void RTSPServer::RTSPClientSession
   double rangeStart = 0.0, rangeEnd = 0.0;
   fStreamAfterSETUP = parseRangeHeader(fullRequestStr, rangeStart, rangeEnd) ||
                       parsePlayNowHeader(fullRequestStr);
-                      
-  // Check for "Required:" header
-  char requiredFeature[64];
-  char requiredKey[64];
-  char requiredVal[64];
-  
-  Boolean require = parseRequireHeader(fullRequestStr, requiredFeature, requiredKey, requiredVal);
-  if (require)
-  {
-  	printf("[live555] requiredFeature: %s, requiredKey: %s, requiredVal: %s\n",
-		requiredFeature, requiredKey, requiredVal);
-  		
-  	if (strncmp(requiredFeature, "force-feature", strlen("force-feature")) == 0 &&
-  	strncmp(requiredKey, "Force", strlen("Force")) == 0 &&
-  	strncmp(requiredVal, "true", strlen("true")) == 0)
-  	{
-  		printf("--> fForceOption = True\n");
-  		fOurServer.setForceOption(True);
-  	}
-  }
-  
-  
-  // Make sure we can stream the requested source
-  printf("[live555] Checking \"%s\" conditions...\n", streamName);
-  if (fOurServer.forceCallback != NULL)
-  {
-  	int force_ret = fOurServer.forceCallback(
-  		fOurServer.forceCallbackServerArg,
-  		fOurServer.forceCallbackSchedulerArg,
-  		fOurServer.forceCallbackStateArg,
-  		streamName);
-  
-  	if (force_ret < 0)
-  	{
-  		// Return error
-  		printf("[live555] Stream \"%s\" cannot be played!\n", streamName);
-		handleCmd_notSupported(cseq);
-		return;
-  	}
-  	else if (force_ret == 1)
-  	{
-  		// 'Force' option is set!
-  		fprintf(stderr, ">>> REMOVING OTHER SESSIONS (we are %d)\n", fOurSessionId);
-  		RTSPClientSessionIterator iter(fOurServer);
-  		
-  		while (fOurServer.fRTSPClientSessions->numEntries() > 1)
-  		{
-  			RTSPClientSession *temp = iter.next();
-
-  			if ((temp != NULL) &&
-  				(temp->fOurSessionId != fOurSessionId))
-  			{
-  				char sessionIdString[12];
-			    sprintf(sessionIdString, "%d", temp->fOurSessionId);
-  				fOurServer.fRTSPClientSessions->Remove(sessionIdString);
-  				delete temp;
-
-  				fprintf(stderr, "[X] Removed %s (%d entries remaining)\n",
-  					sessionIdString, fOurServer.fRTSPClientSessions->numEntries());
-  			}
-  		}
-  	}
-  }
-
 
-  // Make sure there's something plugged to the requested source
-  printf("[live555] Checking \"%s\" input...\n", streamName);
-  if (fOurServer.sourceSwitchCallback != NULL)
-  {
-    int switchret = fOurServer.sourceSwitchCallback(
-    	fOurServer.sourceSwitchStateArg,
-    	streamName);
-    
-    if (switchret != 0)
-    {
-    	// Return error
-    	printf("[live555] Stream \"%s\" is not available!\n", streamName);
-    	handleCmd_notFound(cseq);
-    	return;
-    }
-  }
-  
-  
   // Then, get server parameters from the 'subsession':
   int tcpSocketNum = streamingMode == RTP_TCP ? fClientSocket : -1;
   netAddressBits destinationAddress = 0;
@@ -1387,26 +1249,6 @@ ServerMediaSession* RTSPServer::ServerMediaSessionIterator::next() {
 }
 
 
-////////// RTSPClientSessionIterator implementation //////////
-
-RTSPServer::RTSPClientSessionIterator
-::RTSPClientSessionIterator(RTSPServer& server)
-  : fOurIterator((server.fRTSPClientSessions == NULL)
-		 ? NULL : HashTable::Iterator::create(*server.fRTSPClientSessions)) {
-}
-
-RTSPServer::RTSPClientSessionIterator::~RTSPClientSessionIterator() {
-  delete fOurIterator;
-}
-
-RTSPServer::RTSPClientSession* RTSPServer::RTSPClientSessionIterator::next() {
-  if (fOurIterator == NULL) return NULL;
-
-  char const* key; // dummy
-  return (RTSPClientSession*)(fOurIterator->next(key));
-}
-
-
 ////////// UserAuthenticationDatabase implementation //////////
 
 UserAuthenticationDatabase::UserAuthenticationDatabase(char const* realm,
diff --git a/liveMedia/include/RTSPClient.hh b/liveMedia/include/RTSPClient.hh
index cc3fdd8..bf1288f 100644
--- a/liveMedia/include/RTSPClient.hh
+++ b/liveMedia/include/RTSPClient.hh
@@ -81,7 +81,6 @@ public:
       // Returns a string containing the list of options, or NULL
 
   Boolean setupMediaSubsession(MediaSubsession& subsession,
-                   Boolean fForceOption = False,
 			       Boolean streamOutgoing = False,
 			       Boolean streamUsingTCP = False,
 			       Boolean forceMulticastOnUnspecified = False);
@@ -155,9 +154,6 @@ public:
   Boolean usingRealNetworksChallengeResponse() const { return fRealChallengeStr != NULL; }
 #endif
 
-  // Get the last received response code
-  unsigned getLastResponseCode() const { return fLastResponseCode; }
-
 protected:
   RTSPClient(UsageEnvironment& env, int verbosityLevel,
 	     char const* applicationName, portNumBits tunnelOverHTTPPortNum);
@@ -239,12 +235,6 @@ private:
 
   // The following is used to deal with Microsoft servers' non-standard use of RTSP:
   Boolean fServerIsMicrosoft;
-
-  // The following is AXAR-specific!
-  Boolean fForceOption;
-  
-  // Last received response code
-  unsigned fLastResponseCode;
 };
 
 #endif
diff --git a/liveMedia/include/RTSPServer.hh b/liveMedia/include/RTSPServer.hh
index 79d5781..3a7140f 100644
--- a/liveMedia/include/RTSPServer.hh
+++ b/liveMedia/include/RTSPServer.hh
@@ -31,12 +31,6 @@ along with this library; if not, write to the Free Software Foundation, Inc.,
 #include "DigestAuthentication.hh"
 #endif
 
-
-typedef int (*switch_callback_fn_t)(void *, char const *);
-typedef int (*force_callback_fn_t)(void *, void *, void *, char const *);
-
-
-
 // A data structure used for optional user/password authentication:
 
 class UserAuthenticationDatabase {
@@ -97,26 +91,6 @@ public:
       // each session's "rtsp://" URL.
       // This string is dynamically allocated; caller should delete[]
 
-  virtual void onSourceSwitch(switch_callback_fn_t func, void *stateArg)
-  {
-    sourceSwitchCallback = func;
-    sourceSwitchStateArg = stateArg;
-  }
-  
-  virtual void onSourceRequest(force_callback_fn_t func, void *serverArg, void *schedulerArg, void *stateArg)
-  {
-  	forceCallback = func;
-  	forceCallbackServerArg = serverArg;
-  	forceCallbackSchedulerArg = schedulerArg;
-  	forceCallbackStateArg = stateArg;
-  }
-  
-  virtual Boolean getForceOption()
-  { return fForceOption; }
-  
-  virtual void setForceOption(Boolean val)
-  { fForceOption = val; }
-
 protected:
   RTSPServer(UsageEnvironment& env,
 	     int ourSocket, Port ourPort,
@@ -134,18 +108,6 @@ protected:
 
 private: // redefined virtual functions
   virtual Boolean isRTSPServer() const;
-  
-  // Source Manager callback
-  switch_callback_fn_t sourceSwitchCallback;
-  void *sourceSwitchStateArg;
-  
-  // Force Source callback
-  force_callback_fn_t forceCallback;
-  void *forceCallbackServerArg;
-  void *forceCallbackSchedulerArg;
-  void *forceCallbackStateArg;
-  
-  Boolean fForceOption;	// Force source change
 
 protected:
   // The state of each individual session handled by a RTSP server:
@@ -228,17 +190,6 @@ protected:
     HashTable::Iterator *fOurIterator;
     ServerMediaSession* fNextPtr;
   };
-  
-  // An iterator over our "RTSPClientSession" objects:
-  class RTSPClientSessionIterator {
-  public:
-    RTSPClientSessionIterator(RTSPServer& server);
-    virtual ~RTSPClientSessionIterator();
-    RTSPClientSession* next();
-  private:
-    HashTable::Iterator *fOurIterator;
-    RTSPClientSession* fNextPtr;
-  };
 
 private:
   static void incomingConnectionHandler(void*, int /*mask*/);
@@ -247,13 +198,11 @@ private:
 private:
   friend class RTSPClientSession;
   friend class ServerMediaSessionIterator;
-  friend class RTSPClientSessionIterator;
   int fServerSocket;
   Port fServerPort;
   UserAuthenticationDatabase* fAuthDB;
   unsigned fReclamationTestSeconds;
   HashTable* fServerMediaSessions;
-  HashTable *fRTSPClientSessions;
   unsigned fSessionIdCounter;
 };
 
